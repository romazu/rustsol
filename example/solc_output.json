{
  "contracts": {
    "contract.sol": {
      "MyContract": {
        "storageLayout": {
          "storage": [
            {
              "astId": 2,
              "contract": "contract.sol:MyContract",
              "label": "plainUint112",
              "offset": 0,
              "slot": "0",
              "type": "t_uint112"
            },
            {
              "astId": 5,
              "contract": "contract.sol:MyContract",
              "label": "dynamicArray",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)dyn_storage"
            },
            {
              "astId": 9,
              "contract": "contract.sol:MyContract",
              "label": "dynamicArrayNested",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
            },
            {
              "astId": 11,
              "contract": "contract.sol:MyContract",
              "label": "plainUint32",
              "offset": 0,
              "slot": "3",
              "type": "t_uint32"
            },
            {
              "astId": 13,
              "contract": "contract.sol:MyContract",
              "label": "plainString",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage"
            },
            {
              "astId": 32,
              "contract": "contract.sol:MyContract",
              "label": "myStructNested",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(MyStructNested)24_storage"
            },
            {
              "astId": 36,
              "contract": "contract.sol:MyContract",
              "label": "staticArray",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint112)10_storage"
            },
            {
              "astId": 41,
              "contract": "contract.sol:MyContract",
              "label": "staticArrayLarge",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_struct(MyStruct)18_storage)2_storage"
            },
            {
              "astId": 47,
              "contract": "contract.sol:MyContract",
              "label": "staticArrayNestedSmall",
              "offset": 0,
              "slot": "17",
              "type": "t_array(t_array(t_uint8)2_storage)4_storage"
            },
            {
              "astId": 51,
              "contract": "contract.sol:MyContract",
              "label": "dynamicArrayStruct",
              "offset": 0,
              "slot": "21",
              "type": "t_array(t_struct(MyStructNested)24_storage)dyn_storage"
            },
            {
              "astId": 55,
              "contract": "contract.sol:MyContract",
              "label": "dynamicArraySmall",
              "offset": 0,
              "slot": "22",
              "type": "t_array(t_struct(MyStructSmall)29_storage)dyn_storage"
            },
            {
              "astId": 59,
              "contract": "contract.sol:MyContract",
              "label": "myMapping1",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_uint256,t_uint256)"
            },
            {
              "astId": 63,
              "contract": "contract.sol:MyContract",
              "label": "myMapping2",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_string_memory_ptr,t_uint256)"
            },
            {
              "astId": 67,
              "contract": "contract.sol:MyContract",
              "label": "myMappingBool",
              "offset": 0,
              "slot": "25",
              "type": "t_mapping(t_bool,t_bool)"
            },
            {
              "astId": 73,
              "contract": "contract.sol:MyContract",
              "label": "myAddressMappingNested",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
            },
            {
              "astId": 79,
              "contract": "contract.sol:MyContract",
              "label": "myNestedMapping",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
            },
            {
              "astId": 85,
              "contract": "contract.sol:MyContract",
              "label": "myEnum",
              "offset": 0,
              "slot": "28",
              "type": "t_enum(MyEnum)82"
            }
          ],
          "types": {
            "t_address": {
              "encoding": "inplace",
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_array(t_uint256)dyn_storage)dyn_storage": {
              "base": "t_array(t_uint256)dyn_storage",
              "encoding": "dynamic_array",
              "label": "uint256[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_array(t_uint8)2_storage)4_storage": {
              "base": "t_array(t_uint8)2_storage",
              "encoding": "inplace",
              "label": "uint8[2][4]",
              "numberOfBytes": "128"
            },
            "t_array(t_struct(MyStruct)18_storage)2_storage": {
              "base": "t_struct(MyStruct)18_storage",
              "encoding": "inplace",
              "label": "struct MyContract.MyStruct[2]",
              "numberOfBytes": "128"
            },
            "t_array(t_struct(MyStructNested)24_storage)dyn_storage": {
              "base": "t_struct(MyStructNested)24_storage",
              "encoding": "dynamic_array",
              "label": "struct MyContract.MyStructNested[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MyStructSmall)29_storage)dyn_storage": {
              "base": "t_struct(MyStructSmall)29_storage",
              "encoding": "dynamic_array",
              "label": "struct MyContract.MyStructSmall[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint112)10_storage": {
              "base": "t_uint112",
              "encoding": "inplace",
              "label": "uint112[10]",
              "numberOfBytes": "160"
            },
            "t_array(t_uint256)dyn_storage": {
              "base": "t_uint256",
              "encoding": "dynamic_array",
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint8)2_storage": {
              "base": "t_uint8",
              "encoding": "inplace",
              "label": "uint8[2]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "encoding": "inplace",
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(MyEnum)82": {
              "encoding": "inplace",
              "label": "enum MyContract.MyEnum",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => address)",
              "numberOfBytes": "32",
              "value": "t_address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => mapping(address => address))",
              "numberOfBytes": "32",
              "value": "t_mapping(t_address,t_address)"
            },
            "t_mapping(t_bool,t_bool)": {
              "encoding": "mapping",
              "key": "t_bool",
              "label": "mapping(bool => bool)",
              "numberOfBytes": "32",
              "value": "t_bool"
            },
            "t_mapping(t_string_memory_ptr,t_uint256)": {
              "encoding": "mapping",
              "key": "t_string_memory_ptr",
              "label": "mapping(string => uint256)",
              "numberOfBytes": "32",
              "value": "t_uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
              "encoding": "mapping",
              "key": "t_uint256",
              "label": "mapping(uint256 => mapping(uint256 => uint256))",
              "numberOfBytes": "32",
              "value": "t_mapping(t_uint256,t_uint256)"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "encoding": "mapping",
              "key": "t_uint256",
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32",
              "value": "t_uint256"
            },
            "t_string_memory_ptr": {
              "encoding": "bytes",
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "encoding": "bytes",
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(MyStruct)18_storage": {
              "encoding": "inplace",
              "label": "struct MyContract.MyStruct",
              "members": [
                {
                  "astId": 15,
                  "contract": "contract.sol:MyContract",
                  "label": "myAddress",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_address"
                },
                {
                  "astId": 17,
                  "contract": "contract.sol:MyContract",
                  "label": "myUint",
                  "offset": 0,
                  "slot": "1",
                  "type": "t_uint256"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MyStructNested)24_storage": {
              "encoding": "inplace",
              "label": "struct MyContract.MyStructNested",
              "members": [
                {
                  "astId": 20,
                  "contract": "contract.sol:MyContract",
                  "label": "myAddress",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_address"
                },
                {
                  "astId": 23,
                  "contract": "contract.sol:MyContract",
                  "label": "myStruct",
                  "offset": 0,
                  "slot": "1",
                  "type": "t_struct(MyStruct)18_storage"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(MyStructSmall)29_storage": {
              "encoding": "inplace",
              "label": "struct MyContract.MyStructSmall",
              "members": [
                {
                  "astId": 26,
                  "contract": "contract.sol:MyContract",
                  "label": "smallInt1",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_uint32"
                },
                {
                  "astId": 28,
                  "contract": "contract.sol:MyContract",
                  "label": "smallInt2",
                  "offset": 4,
                  "slot": "0",
                  "type": "t_uint32"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint112": {
              "encoding": "inplace",
              "label": "uint112",
              "numberOfBytes": "14"
            },
            "t_uint256": {
              "encoding": "inplace",
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "encoding": "inplace",
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "encoding": "inplace",
              "label": "uint8",
              "numberOfBytes": "1"
            }
          }
        }
      }
    }
  },
  "errors": [
    {
      "component": "general",
      "errorCode": "1878",
      "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contract.sol\n\n",
      "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
      "severity": "warning",
      "sourceLocation": {
        "end": -1,
        "file": "contract.sol",
        "start": -1
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "errorCode": "3420",
      "formattedMessage": "Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.26;\"\n--> contract.sol\n\n",
      "message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.26;\"",
      "severity": "warning",
      "sourceLocation": {
        "end": -1,
        "file": "contract.sol",
        "start": -1
      },
      "type": "Warning"
    }
  ],
  "sources": {
    "contract.sol": {
      "id": 0
    }
  }
}